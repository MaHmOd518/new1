{"version":3,"sources":["API/axios.js","components/comments.js","components/posts.js","components/users.js","App.js","serviceWorker.js","index.js"],"names":["a","axios","get","response","console","error","Comment","comment","Card","Body","email","name","style","fontSize","body","Post","post","useState","comments","setComments","useEffect","getComments","then","data","Title","title","Text","filter","c","postId","id","map","key","User","user","posts","setPosts","getPosts","backgroundColor","borderRadius","width","height","marginRight","p","userId","className","Header","as","Badge","App","users","setUsers","statu","setStatu","getUsers","Navbar","bg","variant","Brand","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fdf05a12.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport async function getPosts() {\r\n  try {\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts')\r\n    return response\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport async function getUsers() {\r\n  try {\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/users')\r\n    return response\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport async function getComments() {\r\n  try {\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/comments')\r\n    return response\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nfunction Comment({ comment }) {\r\n  return (\r\n    <>\r\n      <Card.Body>\r\n        {comment.email}:<h6>-{comment.name}</h6>\r\n        <span style={{ fontSize: '.9rem' }}>{comment.body}</span>\r\n      </Card.Body>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Comment\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport { getComments } from '../API/axios'\r\nimport Comment from './comments'\r\n\r\nfunction Post({ post }) {\r\n  const [comments, setComments] = useState([])\r\n\r\n  useEffect(() => {\r\n    getComments().then(response => {\r\n      setComments(response.data)\r\n    })\r\n  }, [])\r\n  return (\r\n    <>\r\n      <Card.Title>{post.title}</Card.Title>\r\n      <Card.Text>{post.body}</Card.Text>\r\n      <hr />\r\n      Comments:\r\n      {comments\r\n        .filter(c => c.postId === post.id)\r\n        .map(comment => (\r\n          <Comment comment={comment} key={comment.id} />\r\n        ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getPosts } from '../API/axios'\r\nimport { Badge, Card } from 'react-bootstrap'\r\nimport Post from './posts'\r\n\r\nfunction User({ user }) {\r\n  const [posts, setPosts] = useState([])\r\n\r\n  useEffect(() => {\r\n    getPosts().then(response => {\r\n      setPosts(response?.data)\r\n    })\r\n  }, [])\r\n\r\n  const style = {\r\n    backgroundColor: 'gray',\r\n    borderRadius: '50%',\r\n    width: '3rem',\r\n    height: '3rem',\r\n    marginRight: '1rem',\r\n  }\r\n\r\n  return posts\r\n    .filter(p => p.userId === user.id)\r\n    .map(post => (\r\n      <Card className='m-3 p-2' key={post.id}>\r\n        <Card.Header className='row' as='h6'>\r\n          <div style={style}>\r\n            <Badge>{user.id}</Badge>\r\n          </div>\r\n          {user.name}\r\n          <br />\r\n          {user.email}\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Post post={post} />\r\n        </Card.Body>\r\n      </Card>\r\n    ))\r\n}\r\n\r\nexport default User\r\n","import React, { useEffect, useState } from 'react'\nimport { Container, Navbar } from 'react-bootstrap'\nimport { getUsers } from './API/axios'\nimport User from './components/users'\n\nfunction App() {\n  const [users, setUsers] = useState([])\n  const [statu, setStatu] = useState('loading')\n\n  useEffect(() => {\n    getUsers().then(response => {\n      setUsers(response?.data)\n      setStatu('success')\n    })\n  }, [])\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark'>\n        <Navbar.Brand>React Community</Navbar.Brand>\n      </Navbar>\n\n      <Container>{statu === 'loading' ? <div>Loading...</div> : users?.map(user => <User user={user} key={user.id} />)}</Container>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}